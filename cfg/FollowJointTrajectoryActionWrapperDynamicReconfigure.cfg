#!/usr/bin/python3
"""
Dynamic reconfigure for optimal stop
"""
from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator
from dynamic_reconfigure.parameter_generator_catkin import double_t, int_t
from dynamic_reconfigure.parameter_generator_catkin import str_t


def _level():
    """steadily increases to provide level value"""
    start = 0
    while True:
        yield start
        start += 1


GENERATOR = _level()


def level():
    """Converts generator into a integer"""
    return next(GENERATOR)


PACKAGE = "opstop_ros"


GEN = ParameterGenerator()


SMOOTHNESS_MEASURE = GEN.enum([
    GEN.const('jerk_l2_max', int_t, 0,
              'Maximum increase in the jerk'),
    GEN.const('acceleration_max', int_t, 1,
              'Maximum increase in the acceleration')],
    "Smoothness measures for optimization limit")


def enum_gen(_type, name_val_doc_list, _doc: str = ''):
    return GEN.enum([GEN.const(name, _type, val, doc)
                     for name, val, doc in name_val_doc_list], _doc)


GEN.add('optimization_window_milliseconds', int_t, level(),
        'Time window to perform the optimization in milliseconds',
        300, 1, 1000)

GEN.add('network_window_milliseconds', int_t, level(),
        'Expected Network delay time in milliseconds', 100, 1, 200)


GEN.add('nglp', int_t, level(),
        'Number of Gass-Lobatto points used to calculations', 2, 2, 5)


SMOOTHNESS_GROUP = GEN.add_group('Smoothness measure limit')
SMOOTHNESS_GROUP.add('alpha', double_t, level(),
                     ('Ration of the maximum allowed '
                      'increment of the smoothness measure'), 2.0, 1.0, 10.0)

SMOOTHNESS_GROUP.add('smoothness_measure', int_t, level(),
                     'Smoothness measure used for the optimization',
                     1, edit_method=SMOOTHNESS_MEASURE)

IPOPT_GROUP = GEN.add_group('ipopt parameters')

IPOPT_GROUP.add('linear_solver', str_t, level(), '',
                'mumps',
                edit_method=enum_gen(
                    str_t, [('ma27', 'ma27',
                             'use the Harwell routine MA27'),
                            ('ma57', 'ma57',
                             'use the Harwell routine MA57'),
                            ('ma77', 'ma77',
                             'use the Harwell routine HSL_MA77'),
                            ('ma86', 'ma86',
                             'use the Harwell routine HSL_MA86'),
                            ('ma97', 'ma97',
                             'use the Harwell routine HSL_MA97'),
                            ('pardiso', 'pardiso',
                             ('use the Pardiso package '
                              'from pardiso-project.org')),
                            ('pardisomkl', 'pardisomkl',
                             'use the Pardiso package from Intel MKL'),
                            ('spral', 'spral',
                             'use the Spral package'),
                            ('wsmp', 'wsmp',
                             'use the Wsmp package'),
                            ('mumps', 'mumps',
                             'use the Mumps package'),
                            ('custom', 'custom',
                             'use custom linear solver(expert use)')
                            ], 'Available linear solvers')
                )

IPOPT_GROUP.add('jacobian_approximation', str_t,
                level(),
                ('Specifies technique '
                 'to compute constraint '
                 'Jacobian'), 'exact',
                edit_method=enum_gen(str_t,
                                     [('exact', 'exact', ''),
                                      ('finite_difference_values',
                                       'finite-difference-values',
                                       '')]))


IPOPT_GROUP.add('fast_step_computation', str_t,
                level(), ('Indicates if the linear system should '
                          'be solved quickly. No residuals are '
                          'computed to verify the solution'), 'yes',
                edit_method=enum_gen(str_t,
                                     [('compute_residuals', 'yes', ''),
                                      ('do_not_compute_residuals', 'no', '')]))

IPOPT_GROUP.add('derivative_test', str_t,
                level(), ('Enable derivative '
                          'checker '
                          'before the optimization'),
                'none',
                edit_method=enum_gen(str_t,
                                     [
                                         ('do_not_perform_derivative_check',
                                          'none',
                                          ('do not perform derivative test')),
                                         ('first_order_derivative_check',
                                          'first-order',
                                          ('perform test of first '
                                           'derivatives at starting point')),
                                         ('second_order_derivative_check',
                                          'second-order',
                                          ('perform test of first and second '
                                           'derivatives at starting point')),
                                         ('only_second_order_derivative_check',
                                          'only-second-order',
                                          ('perform test of second '
                                           'derivatives at starting point'))
                                     ]
                                     ))


IPOPT_GROUP.add('hessian_approximation', str_t, level(), '', 'limited-memory',
                edit_method=enum_gen(str_t, [(('limited_memory_'
                                               'hessian_approximation'),
                                              'limited-memory', ''),
                                             ('exact_hessian_provided',
                                              'exact', '')]))

IPOPT_GROUP.add('jac_c_constant', str_t, level(), '', 'no',
                edit_method=enum_gen(str_t, [('yes_the_jacobian_is_constant',
                                              'yes', ''),
                                             (('no_'
                                               'the_jacobian_is_not_constant'),
                                              'no', '')]))

IPOPT_GROUP.add('print_timing_statistics', str_t,
                level(), '', 'no',
                edit_method=enum_gen(str_t, [('no_print_timing_statistics',
                                              'no', ''),
                                             ('yes_print_timing_statistics',
                                              'yes', '')]))

IPOPT_GROUP.add('dependency_detector', str_t,
                level(), ('Indicates if a linear '
                          'solver should be used to '
                          'detect linearly dependent '
                          'equality constraints.'),
                'mumps',
                edit_method=enum_gen(str_t, [
                    ('do_not_check_dependencies_on_jacobian',
                     'none', ('do not check;'
                              ' no extra work at beginning')),
                    ('use_mumps_to_detect_dependencies',
                     'mumps', ('use MUMPS')),
                    ('use_wsmp_to_detect_dependencies',
                     'wsmp', ('use WSMP')),
                    ('use_ma28_to_detect_dependencies',
                     'ma28', ('use MA28'))
                ]))

IPOPT_GROUP.add('dependency_detection_with_rhs', str_t,
                level(), (' Indicates if '
                          'the right hand sides of the constraints should '
                          'be considered in addition to gradients '
                          'during dependency detection'),
                'no', edit_method=enum_gen(str_t,
                                           [(('no_'
                                              'use_rhs_to_detect_'
                                              'dependencies'), 'no', ''),
                                            (('yes_'
                                              'use_rhs_to_detect_'
                                              'dependencies'), 'yes', '')]))


IPOPT_GROUP.add('tol', double_t,
                level(), ('Determines the '
                          'convergence tolerance for '
                          'the algorithm. The algorithm '
                          'terminates successfully, if '
                          'the (scaled) NLP error becomes '
                          'smaller than this value, and if '
                          'the (absolute) criteria '
                          'according to '
                          'dual_inf_tol, '
                          'constr_viol_tol, '
                          'and compl_inf_tol are met. '
                          'This is epsilon_tol in Eqn. (6) '
                          'in implementation paper.'),
                0.001,
                1.0e-8,
                1.0)

IPOPT_GROUP.add('dual_inf_tol', double_t,
                level(), ('Absolute tolerance '
                          'on the dual '
                          'infeasibility. '
                          'Successful termination '
                          'requires that the '
                          'max-norm of the '
                          '(unscaled) dual '
                          'infeasibility is less '
                          'than this threshold.'),
                0.001, 1.0e-8, 1.0)

IPOPT_GROUP.add('constr_viol_tol',
                double_t, level(), ('Absolute tolerance on the constraint '
                                    'and variable bound violation. '
                                    'Successful termination requires that '
                                    'the max-norm of the(unscaled) '
                                    'constraint violation is less than this'
                                    ' threshold. If option '
                                    'bound_relax_factor is not zero 0, '
                                    'then Ipopt relaxes given variable '
                                    'bounds. The value of constr_viol_tol '
                                    'is used to restrict the absolute '
                                    'amount of this bound relaxation'),
                0.0001, 1.0e-8, 1.0)


IPOPT_GROUP.add('compl_inf_tol',
                double_t, level(),
                ('Absolute tolerance on the complementarity. Successful '
                 'termination requires that the max-norm of the (unscaled) '
                 'complementarity is less than this threshold. The valid '
                 'range for this real option is 0 < compl_inf_tol and its '
                 'default value is 0.0001.'),
                0.0001, 1.e-8, 1.0)

IPOPT_GROUP.add('print_level',
                int_t, level(),
                ('Sets the default verbosity level for console output.'
                 ),
                0, 0, 12)

exit(GEN.generate(PACKAGE, PACKAGE,
                  "FollowJointTrajectoryActionWrapperDynamicReconfigure"))
