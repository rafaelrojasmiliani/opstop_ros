#! /usr/bin/env python
"""
    Listest to gsplines and plot them
"""
from control_msgs.msg import FollowJointTrajectoryActionGoal

import rospy
from trajectory_msgs.msg import JointTrajectory
from matplotlib import pyplot as plt
import numpy as np
import matplotlib
import time
import datetime


def mypause(interval):
    """ Workarround to prevent the plot window to steal the desktop focus
    https://stackoverflow.com/questions/45729092/make-interactive-matplotlib-window-not-pop-to-front-on-each-update-windows-7/45734500#45734500
    """
    backend = plt.rcParams['backend']
    if backend in matplotlib.rcsetup.interactive_bk:
        figure_manager = matplotlib._pylab_helpers.Gcf.get_active()
        if figure_manager is not None:
            canvas = figure_manager.canvas
            if canvas.figure.stale:
                canvas.draw()
            canvas.start_event_loop(interval)
            return


COLOR_FORMAT = 'r*-'

CURRENT_INITIAL_TIME = 0
CURRENT_FINAL_TIME = None


class Node:
    """ Generic node class"""

    def __init__(self):
        rospy.init_node('gsplines_plotter')
        self.params = {}
        self.params['control_name'] = "pos_joint_traj_controller"
        self.params['title'] = "plot"
        matplotlib.use("Qt5agg")

        for key, value in self.params.items():
            self.params[key] = rospy.get_param('~'+key, value)

        self.subs_ = rospy.Subscriber(
            self.params['control_name'] +
            "/follow_joint_trajectory/goal", FollowJointTrajectoryActionGoal,
            self.callback_goal)

        self.figure_ = plt.figure(figsize=(18, 10.5), constrained_layout=True)
        self.plot_axes_ = None
        self.current_initial_time_ = 0
        self.previous_final_time_ = None
        plt.show()

    def plot(self, _trj_msg: JointTrajectory, _initial_time):
        """ plot the gspline"""

        self.show_piecewisefunction(self.figure_, _trj_msg,
                                    self.params['title'],
                                    _initial_time=_initial_time)
        mypause(0.001)

    def callback_goal(self, _msg: FollowJointTrajectoryActionGoal):
        self.plot(_msg.goal.trajectory,
                  _msg.goal.trajectory.header.stamp.to_sec())

    def show_piecewisefunction(self, _figure, _trj_msg: JointTrajectory,
                               _title='',
                               _initial_time=0.0):
        """
            plot piecewise function
        """
        if _initial_time < 1.0e-7:
            _initial_time = rospy.Time.now().to_sec()
        dim = len(_trj_msg.joint_names)
        gridspec = _figure.add_gridspec(3, dim)
        if self.plot_axes_ is None or self.plot_axes_.shape[1] != dim:
            self.plot_axes_ = np.array(
                [[_figure.add_subplot(gridspec[i, j]) for j in range(dim)]
                 for i in range(3)])

        """
        oconsider this
        https://stackoverflow.com/questions/25812255/row-and-column-headers-in-matplotlibs-subplots
        """
        if dim == 1:
            self.plot_axes_ = np.array(
                [[self.plot_axes_[i]] for i in range(3)])

        if rospy.get_param('/use_sim_time', False):
            time_0 = 0.0
        else:
            time_0 = np.trunc(_initial_time/100)*100

        time_spam = np.array([_initial_time +
                              point.time_from_start.to_sec()
                              for point in _trj_msg.points])

        self.current_initial_time_ = time_spam[0]

        rows = ["positions",
                "velocities",
                "accelerations"]

        cols = _trj_msg.joint_names

        if self.previous_final_time_ is not None and \
                self.current_initial_time_ > self.previous_final_time_:
            fmt = 'b*-'
            for row_idx, row_attr in enumerate(rows):
                for col_idx, col_name in enumerate(cols):
                    self.plot_axes_[row_idx, col_idx].clear()
        elif self.previous_final_time_ is not None and \
                self.current_initial_time_ >= self.previous_final_time_:

            fmt = 'b*-'
        else:
            fmt = 'r*-'

        self.previous_final_time_ = time_spam[-1]
        time_spam -= time_0
        for row_idx, row_attr in enumerate(rows):
            for col_idx, col_name in enumerate(cols):
                array_to_plot = [getattr(point, row_attr)[col_idx]
                                 for point in _trj_msg.points]
                self.plot_axes_[row_idx, col_idx].plot(
                    time_spam, array_to_plot, fmt)
                self.plot_axes_[row_idx, col_idx].grid(True)

                # self.plot_axes_[row_idx, col_idx].set_xticks(
                #    np.arange(time_spam[0], time_spam[-1], 0.5), minor=True)

        for ax, col in zip(self.plot_axes_[0], cols):
            ax.set_title(col)

        rows = ["positions [rad]",
                "velocities [rad/s]",
                "accelerations [rad/s^2]"]
        for ax, row in zip(self.plot_axes_[:, 0], rows):
            ax.set_ylabel(row, rotation=90, size='large')

        for ax in self.plot_axes_[-1, :]:
            ax.set_xlabel("Time [s]", size='large')


if __name__ == "__main__":
    tr = Node()
